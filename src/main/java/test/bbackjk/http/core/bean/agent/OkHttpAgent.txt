package test.bbackjk.http.core.bean.agent;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.*;
import okio.Buffer;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMethod;
import test.bbackjk.http.core.configuration.RestClientConnectProperties;
import test.bbackjk.http.core.util.RestClientUtils;
import test.bbackjk.http.core.wrapper.RequestMetadata;
import test.bbackjk.http.core.exceptions.RestClientCallException;
import test.bbackjk.http.core.helper.LogHelper;
import test.bbackjk.http.core.interfaces.HttpAgent;
import test.bbackjk.http.core.wrapper.ResponseMetadata;

import java.io.IOException;
import java.nio.charset.Charset;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;


@Component
public class OkHttpAgent implements HttpAgent {
    private static final String LOGGING_DELIMITER = "========================================================================================";
    private final OkHttpClient client;
    private final ObjectMapper om;

    public OkHttpAgent(RestClientConnectProperties connectProperties) {
        OkHttpClient.Builder okHttpBuilder = new OkHttpClient.Builder();

        Duration timeout = Duration.ofSeconds(connectProperties.getSocketTimeout());

        // 연결하려는 서버와 connect 를 하는 제한 시간 설정 ( default 10s ) ==> SocketTimeoutException 발생
        okHttpBuilder.connectTimeout(timeout);
        // 호출한 서버의 응답을 기다리는 제한 시간 설정 ( default 10s ) ==> SocketTimeoutException 발생
        okHttpBuilder.readTimeout(timeout);
        // 서버를 호출 할 때 요청을 만드는 제한 시간 설정 ( default 10s ) ==> SocketTimeoutException 발생
        okHttpBuilder.writeTimeout(timeout);
        // 완전한 HTTP 호출에 대한 제한 시간 설정 ( DNS 확인, 연결, 요청 본문 작성, 서버 처리 및 응답 본문 읽기가 포함 ) ( default 10s ) ==> InterruptedIOException 발생
        okHttpBuilder.callTimeout(timeout);

        okHttpBuilder.connectionPool(
                new ConnectionPool(
                        connectProperties.getConnectPoolSize()
                        , connectProperties.getConnectKeepAlive()
                        , TimeUnit.MINUTES
                )
        );

        this.client = okHttpBuilder.build();
        this.om = new ObjectMapper();
    }


    @Override
    public ResponseMetadata doGet(RequestMetadata requestMetadata) throws RestClientCallException {
        return this.doHttp(requestMetadata, RequestMethod.GET);
    }

    @Override
    public ResponseMetadata doPost(RequestMetadata requestMetadata) throws RestClientCallException {
        return this.doHttp(requestMetadata, RequestMethod.POST);
    }

    @Override
    public ResponseMetadata doPatch(RequestMetadata requestMetadata) throws RestClientCallException {
        return this.doHttp(requestMetadata, RequestMethod.PATCH);
    }

    @Override
    public ResponseMetadata doPut(RequestMetadata requestMetadata) throws RestClientCallException {
        return this.doHttp(requestMetadata, RequestMethod.PUT);
    }

    @Override
    public ResponseMetadata doDelete(RequestMetadata requestMetadata) throws RestClientCallException {
        return this.doHttp(requestMetadata, RequestMethod.DELETE);
    }

    private ResponseMetadata doHttp(RequestMetadata requestMetadata, RequestMethod requestMethod) throws RestClientCallException {
        RequestBody requestBody = null;

        if (RestClientUtils.orEqualsEnum(requestMethod, RequestMethod.POST, RequestMethod.PUT, RequestMethod.PATCH)) {
            try {
                requestBody = this.getRequestBody(requestMetadata);
            } catch (JsonProcessingException e) {
                throw new RestClientCallException(e);
            }
        }
        String url = RestClientUtils.getParseUrl(requestMetadata);
        LogHelper logger = requestMetadata.getRestClientLogger();

        HttpUrl.Builder httpUrlBuilder = HttpUrl.get(url).newBuilder();
        this.initQueryParameters(httpUrlBuilder, requestMetadata.getQueryValuesMap());
        Request.Builder requestBuilder = new Request.Builder()
                .method(requestMethod.name(), requestBody)
                .url(httpUrlBuilder.build());
        this.initHeaderValues(requestBuilder, requestMetadata.getHeaderValuesMap());

        Request request = requestBuilder.build();
        this.requestLogging(request, logger);
        try (Response result = client.newCall(request).execute()) {
            ResponseBody responseBody = result.body();
            String bodyString = responseBody == null ? "" : responseBody.string();
            this.responseLogging(result, logger, bodyString);
            return new ResponseMetadata(result.code(), bodyString, result.header(RestClientUtils.HEADER_CONTENT_TYPE_KEY));
        } catch (IOException e) {
            throw new RestClientCallException(e);
        }
    }

    private void initQueryParameters(HttpUrl.Builder httpUrlBuilder, Map<String, String> queryValueMap) {
        if (!queryValueMap.isEmpty()) {
            for (Map.Entry<String, String> value : queryValueMap.entrySet()) {
                String val = value.getValue();
                if ( val != null ) {
                    httpUrlBuilder.addQueryParameter(value.getKey(), val);
                }
            }
        }
    }

    private void initHeaderValues(Request.Builder requestBuilder, Map<String, String> headerValueMap) {
        if (!headerValueMap.isEmpty()) {
            for (Map.Entry<String, String> value : headerValueMap.entrySet()) {
                requestBuilder.addHeader(value.getKey(), value.getValue());
            }
        }
    }

    private RequestBody getRequestBody(RequestMetadata requestMetadata) throws JsonProcessingException {
        if (requestMetadata.isFormContent()) {
            Map<?, ?> map = requestMetadata.getBodyData() == null
                    ? new HashMap<>()
                    : om.convertValue(requestMetadata.getBodyData(), Map.class);
            FormBody.Builder builder = new FormBody.Builder();
            map.forEach((k, v) -> builder.add(String.valueOf(k), String.valueOf(v)));
            return builder.build();
        }

        return RequestBody.create(
                om.writeValueAsString(requestMetadata.getBodyData() == null ? new HashMap<>() : requestMetadata.getBodyData())
                , MediaType.parse(requestMetadata.getContentType().toString())
        );
    }

    private void requestLogging(Request request, LogHelper logger) {
        int headerSize = request.headers().size();

        logger.log("Request\t\t{}", LOGGING_DELIMITER);
        logger.log("Request\t\t| Url\t\t\t\t: {} {} ", request.method(), request.url().url());
        if (headerSize < 1) {
            logger.log("Request\t\t| Header\t\t\t: EMPTY");
        } else {
            request.headers().iterator()
                    .forEachRemaining(h -> logger.log("Request\t\t| Header\t\t\t: {} - {}", h.component1(), h.component2()));
        }

        if (request.body() != null) {
            try (Buffer bf = new Buffer()) {
                request.body().writeTo(bf);
                logger.log("Request\t\t| Body\t\t\t\t: {}", bf.readString(Charset.defaultCharset()));
                logger.log("Request\t\t| Content-Type\t\t: {}", request.body().contentType());
            } catch (IOException e) {
                // ignore...
            }
        }
        logger.log("Request\t\t{}", LOGGING_DELIMITER);
    }

    private void responseLogging(Response response, LogHelper logger, String jsonString) {
        int headerSize = response.headers().size();

        logger.log("Response\t\t{}", LOGGING_DELIMITER);
        logger.log("Response\t\t| Protocol - Millis\t: {} - {} ms", response.protocol(), response.receivedResponseAtMillis() - response.sentRequestAtMillis());
        logger.log("Response\t\t| Data(String)\t\t: {}", jsonString);
        if (headerSize < 1) {
            logger.log("Response\t\t| Header\t\t\t: EMPTY");
        } else {
            response.headers().iterator()
                    .forEachRemaining(h -> logger.log("Response\t\t| Header\t\t\t: {} - {}", h.component1(), h.component2()));
        }
        logger.log("Response\t\t{}", LOGGING_DELIMITER);
    }
}
